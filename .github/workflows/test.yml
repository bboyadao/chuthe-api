name: Django CI & PostgresDB & Test apps

on:
  workflow_call:
  workflow_dispatch:

jobs:
  django_test:
    runs-on: ubuntu-latest
    env:
      DJANGO_SECRET_KEY: test-key-not-good-maybe-make-one-better
      POSTGRES_DB: testdb
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_USER: myuser
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      DB_IGNORE_SSL: "true"
    services:
      postgres_main:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      max-parallel: 10
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Identity branch
        id: branch
        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}

      - name: Map branch to env then set it
        env:
          IS_PR: ${{ github.EVENT_NAME == 'pull_request' }}
        run: |
          if ${IS_PR}; then
            BRANCH_NAME="${GITHUB_HEAD_REF}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/*/}"
          fi
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "CHUTHE_ENV=${BRANCH_NAME^^}" >> $GITHUB_ENV

      - name: Check all envs
        run: |
          echo $BRANCH_NAME

      - name: Install pip & poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Config Poetry
        run: |
          poetry config virtualenvs.create false

      - name: Install Deps
        run: |
          poetry install $(test "$YOUR_ENV" == production && echo "--no-dev") --no-interaction --no-ansi

      - name: Run tests
        run: |
          python manage.py test

